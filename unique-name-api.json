{
	"AWSTemplateFormatVersion": "2010-09-09",
	"Description": "An API for generating unique names.",
    "Metadata": {
        "AWS::CloudFormation::Interface": {
            "ParameterGroups": [
                {
                    "Label": {
                        "default": "Initial Setup"
                    },
                    "Parameters": ["ShuffleWordList"]
                }
            ],
            "ParameterLabels": {
                "ShuffleWordList": {
                    "default": "Shuffle Word List"
                }
            }
        }
    },
	"Parameters": {
        "ShuffleWordList": {
            "Type": "String",
			"Default": "Yes",
			"AllowedValues": ["Yes", "No"]
        }
    },
	"Mappings": {
		"StaticVariables": {
			"Main": {
                "GenerateNameHttpMethod": "GET",
                "GenerateNameMethodPathPart": "generate-name",
                "StageName": "v1",
                "WordList": "aardvark\naardwolf\nabalone\nabyssiniancat\nabyssiniangroundhornbill\nacaciarat\nachillestang\nacornbarnacle\nacornweevil\nacornwoodpecker\nacouchi\nadamsstaghornedbeetle\naddax\nadder\nadeliepenguin\nadmiralbutterfly\nadouri\naegeancat\naffenpinscher\nafghanhound\nafricanaugurbuzzard\nafricanbushviper\nafricancivet\nafricanclawedfrog\nafricanelephant\nafricanfisheagle\nafricangoldencat\nafricangroundhornbill\nafricanharrierhawk\nafricanhornbill\nafricanjacana\nafricanmolesnake\nafricanparadiseflycatcher\nafricanpiedkingfisher\nafricanporcupine\nafricanrockpython\nafricanwildcat\nafricanwilddog\nagama\nagouti\naidi\nairedale\nairedaleterrier\nakitainu\nalabamamapturtle\nalaskajingle\nalaskanhusky\nalaskankleekai\nalaskanmalamute\nalbacoretuna\nalbatross\nalbertosaurus\nalbino\naldabratortoise\nallensbigearedbat\nalleycat\nalligator\nalligatorgar\nalligatorsnappingturtle\nallosaurus\nalpaca\nalpinegoat\nalpineroadguidetigerbeetle\naltiplanochinchillamouse\namazondolphin\namazonparrot\namazontreeboa\namberpenshell\nambushbug\namericanalligator\namericanavocet\namericanbadger\namericanbittern\namericanblackvulture\namericanbobtail\namericanbulldog\namericancicada\namericancrayfish\namericancreamdraft\namericancrocodile\namericancrow\namericancurl\namericangoldfinch\namericanindianhorse\namericankestrel\namericanlobster\namericanmarten\namericanpainthorse\namericanquarterhorse\namericanratsnake\namericanredsquirrel\namericanriverotter\namericanrobin\namericansaddlebred\namericanshorthair\namericantoad\namericanwarmblood\namericanwigeon\namericanwirehair\namethystgemclam\namethystinepython\namethystsunbird\nammonite\namoeba\namphibian\namphiuma\namurminnow\namurratsnake\namurstarfish\nanaconda\nanchovy\nandalusianhorse\nandeancat\nandeancockoftherock\nandeancondor\nanemone\nanemonecrab\nanemoneshrimp\nangelfish\nangelwingmussel\nanglerfish\nangora\nangwantibo\nanhinga\nankole\nankolewatusi\nannashummingbird\nannelid\nannelida\nanole\nanophelesmosquito\nant\nantarcticfurseal\nantarcticgiantpetrel\nantbear\nanteater\nantelope\nantelopegroundsquirrel\nantipodesgreenparakeet\nantlion\nanura\naoudad\napatosaur\nape\naphid\napisdorsatalaboriosa\naplomadofalcon\nappaloosa\naquaticleech\narabianhorse\narabianoryx\narabianwildcat\naracari\narachnid\narawana\narchaeocete\narchaeopteryx\narcherfish\narcticduck\narcticfox\narctichare\narcticseal\narcticwolf\nargali\nargentinehornedfrog\nargentineruddyduck\nargusfish\narieltoucan\narizonaalligatorlizard\narkshell\narmadillo\narmedcrab\narmednylonshrimp\narmyant\narmyworm\narrowana\narrowcrab\narrowworm\narthropods\naruanas\nasianconstablebutterfly\nasiandamselfly\nasianelephant\nasianlion\nasianpiedstarling\nasianporcupine\nasiansmallclawedotter\nasiantrumpetfish\nasianwaterbuffalo\nasiaticgreaterfreshwaterclam\nasiaticlesserfreshwaterclam\nasiaticmouflon\nasiaticwildass\nasp\nass\nassassinbug\nastarte\nastrangiacoral\natlanticblackgoby\natlanticbluetang\natlanticridleyturtle\natlanticsharpnosepuffer\natlanticspadefish\natlasmoth\nattwatersprairiechicken\nauk\nauklet\naurochs\naustraliancattledog\naustraliancurlew\naustralianfreshwatercrocodile\naustralianfurseal\naustraliankelpie\naustraliankestrel\naustralianshelduck\naustraliansilkyterrier\naustrianpinscher\navians\navocet\naxisdeer\naxolotl\nayeaye\naztecant\nazurevase\nazurevasesponge\nazurewingedmagpie\nbabirusa\nbaboon\nbackswimmer\nbactrian\nbadger\nbagworm\nbaiji\nbaldeagle\nbaleenwhale\nballoonfish\nballpython\nbandicoot\nbangeltiger\nbantamrooster\nbanteng\nbarasinga\nbarasingha\nbarb\nbarbet\nbarebirdbat\nbarnacle\nbarnowl\nbarnswallow\nbarracuda\nbasenji\nbasil\nbasilisk\nbass\nbassethound\nbat\nbats\nbeagle\nbear\nbeardedcollie\nbeardeddragon\nbeauceron\nbeaver\nbedbug\nbedlingtonterrier\nbee\nbeetle\nbellfrog\nbellsnake\nbelugawhale\nbengaltiger\nbergerpicard\nbernesemountaindog\nbetafish\nbettong\nbichonfrise\nbighorn\nbighornedsheep\nbighornsheep\nbigmouthbass\nbilby\nbillygoat\nbinturong\nbird\nbirdofparadise\nbison\nbittern\nblackandtancoonhound\nblackbear\nblackbird\nblackbuck\nblackcrappie\nblackfish\nblackfly\nblackfootedferret\nblacklab\nblacklemur\nblackmamba\nblacknorwegianelkhound\nblackpanther\nblackrhino\nblackrussianterrier\nblackwidowspider\nblesbok\nblobfish\nblowfish\nblueandgoldmackaw\nbluebird\nbluebottle\nbluebottlejellyfish\nbluebreastedkookaburra\nbluefintuna\nbluefish\nbluegill\nbluejay\nbluemorphobutterfly\nblueshark\nbluet\nbluetickcoonhound\nbluetonguelizard\nbluewhale\nboa\nboaconstrictor\nboar\nbobcat\nbobolink\nbobwhite\nboilweevil\nbongo\nbonobo\nbooby\nbordercollie\nborderterrier\nborer\nborzoi\nboto\nboubou\nboutu\nbovine\nbrahmanbull\nbrahmancow\nbrant\nbream\nbrocketdeer\nbronco\nbrontosaurus\nbrownbear\nbrownbutterfly\nbubblefish\nbuck\nbuckeyebutterfly\nbudgie\nbufeo\nbuffalo\nbufflehead\nbug\nbull\nbullfrog\nbullmastiff\nbumblebee\nbunny\nbunting\nburro\nbushbaby\nbushsqueaker\nbustard\nbutterfly\nbuzzard\ncaecilian\ncaiman\ncaimanlizard\ncalf\ncamel\ncanadagoose\ncanary\ncanine\ncanvasback\ncapeghostfrog\ncapybara\ncaracal\ncardinal\ncaribou\ncarp\ncarpenterant\ncassowary\ncat\ncatbird\ncaterpillar\ncatfish\ncats\ncattle\ncaudata\ncavy\ncentipede\ncero\nchafer\nchameleon\nchamois\nchanticleer\ncheetah\nchevrotain\nchick\nchickadee\nchicken\nchihuahua\nchimneyswift\nchimpanzee\nchinchilla\nchinesecrocodilelizard\nchipmunk\nchital\nchrysalis\nchrysomelid\nchuckwalla\nchupacabra\ncicada\ncirriped\ncivet\nclam\ncleanerwrasse\nclingfish\nclownanemonefish\nclumber\ncoati\ncob\ncobra\ncock\ncockatiel\ncockatoo\ncockerspaniel\ncockroach\ncod\ncoelacanth\ncollardlizard\ncollie\ncolt\ncomet\ncommabutterfly\ncommongonolek\nconch\ncondor\nconey\nconure\ncony\ncoot\ncooter\ncopepod\ncopperbutterfly\ncopperhead\ncoqui\ncoral\ncormorant\ncornsnake\ncorydorascatfish\ncottonmouth\ncottontail\ncougar\ncow\ncowbird\ncowrie\ncoyote\ncoypu\ncrab\ncrane\ncranefly\ncrayfish\ncreature\ncricket\ncrocodile\ncrocodileskink\ncrossbill\ncrow\ncrownofthornsstarfish\ncrustacean\ncub\ncuckoo\ncur\ncurassow\ncurlew\ncuscus\ncusimanse\ncuttlefish\ncutworm\ncygnet\ndachshund\ndaddylonglegs\ndairycow\ndalmatian\ndamselfly\ndanishswedishfarmdog\ndarklingbeetle\ndartfrog\ndarwinsfox\ndassie\ndassierat\ndavidstiger\ndeer\ndeermouse\ndegu\ndegus\ndeinonychus\ndesertpupfish\ndevilfish\ndeviltasmanian\ndiamondbackrattlesnake\ndikdik\ndikkops\ndingo\ndinosaur\ndiplodocus\ndipper\ndiscus\ndobermanpinscher\ndoctorfish\ndodo\ndodobird\ndoe\ndog\ndogfish\ndogwoodclubgall\ndogwoodtwigborer\ndolphin\ndonkey\ndorado\ndore\ndorking\ndormouse\ndotterel\ndouglasfirbarkbeetle\ndove\ndowitcher\ndrafthorse\ndragon\ndragonfly\ndrake\ndrever\ndromaeosaur\ndromedary\ndrongo\nduck\nduckbillcat\nduckbillplatypus\nduckling\ndugong\nduiker\ndungbeetle\ndungenesscrab\ndunlin\ndunnart\ndutchshepherddog\ndutchsmoushond\ndwarfmongoose\ndwarfrabbit\neagle\nearthworm\nearwig\neasternglasslizard\neasternnewt\neasteuropeanshepherd\neastrussiancoursinghounds\neastsiberianlaika\nechidna\neel\neelelephant\neeve\neft\negg\negret\neider\neidolonhelvum\nekaltadeta\neland\nelectriceel\nelephant\nelephantbeetle\nelephantseal\nelk\nelkhound\nelver\nemeraldtreeskink\nemperorpenguin\nemperorshrimp\nemu\nenglishpointer\nenglishsetter\nequestrian\nequine\nerin\nermine\nerne\neskimodog\nesok\nestuarinecrocodile\nethiopianwolf\neuropeanfiresalamander\neuropeanpolecat\newe\neyas\neyelashpitviper\neyra\nfairybluebird\nfairyfly\nfalcon\nfallowdeer\nfantail\nfanworms\nfattaileddunnart\nfawn\nfeline\nfennecfox\nferret\nfiddlercrab\nfieldmouse\nfieldspaniel\nfinch\nfinnishspitz\nfinwhale\nfireant\nfirebelliedtoad\nfirecrest\nfirefly\nfish\nfishingcat\nflamingo\nflatcoatretriever\nflatfish\nflea\nflee\nflicker\nflickertailsquirrel\nflies\nflounder\nfluke\nfly\nflycatcher\nflyingfish\nflyingfox\nflyinglemur\nflyingsquirrel\nfoal\nfossa\nfowl\nfox\nfoxhound\nfoxterrier\nfrenchbulldog\nfreshwatereel\nfrigatebird\nfrilledlizard\nfrillneckedlizard\nfritillarybutterfly\nfrog\nfrogmouth\nfruitbat\nfruitfly\nfugu\nfulmar\nfunnelweaverspider\nfurseal\ngadwall\ngalago\ngalah\ngalapagosalbatross\ngalapagosdove\ngalapagoshawk\ngalapagosmockingbird\ngalapagospenguin\ngalapagossealion\ngalapagostortoise\ngallinule\ngallowaycow\ngander\ngangesdolphin\ngannet\ngar\ngardensnake\ngarpike\ngartersnake\ngaur\ngavial\ngazelle\ngecko\ngeese\ngelada\ngelding\ngemsbok\ngemsbuck\ngenet\ngentoopenguin\ngerbil\ngerenuk\ngermanpinscher\ngermanshepherd\ngermanshorthairedpointer\ngermanspaniel\ngermanspitz\ngermanwirehairedpointer\ngharial\nghostshrimp\ngiantschnauzer\ngibbon\ngilamonster\ngiraffe\nglassfrog\nglobefish\nglowworm\ngnat\ngnatcatcher\ngnu\ngoa\ngoat\ngodwit\ngoitered\ngoldeneye\ngoldenmantledgroundsquirrel\ngoldenretriever\ngoldfinch\ngoldfish\ngonolek\ngoose\ngoosefish\ngopher\ngoral\ngordonsetter\ngorilla\ngoshawk\ngosling\ngossamerwingedbutterfly\ngourami\ngrackle\ngrasshopper\ngrassspider\ngrayfox\ngrayling\ngrayreefshark\ngraysquirrel\ngraywolf\ngreatargus\ngreatdane\ngreathornedowl\ngreatwhiteshark\ngrebe\ngreendarnerdragonfly\ngreyhounddog\ngrison\ngrizzlybear\ngrosbeak\ngroundbeetle\ngroundhog\ngrouper\ngrouse\ngrub\ngrunion\nguanaco\nguernseycow\nguillemot\nguineafowl\nguineapig\ngull\nguppy\ngypsymoth\ngyrfalcon\nhackee\nhaddock\nhadrosaurus\nhagfish\nhairstreak\nhairstreakbutterfly\nhake\nhalcyon\nhalibut\nhalicore\nhamadryad\nhamadryas\nhammerheadbird\nhammerheadshark\nhammerkop\nhamster\nhanumanmonkey\nhapuka\nhapuku\nharborporpoise\nharborseal\nhare\nharlequinbug\nharpseal\nharpyeagle\nharrier\nharrierhawk\nhart\nhartebeest\nharvestmen\nharvestmouse\nhatchetfish\nhawaiianmonkseal\nhawk\nhectorsdolphin\nhedgehog\nheifer\nhellbender\nhen\nherald\nherculesbeetle\nhermitcrab\nheron\nherring\nheterodontosaurus\nhind\nhippopotamus\nhoatzin\nhochstettersfrog\nhog\nhogget\nhoiho\nhoki\nhomalocephale\nhoneybadger\nhoneybee\nhoneycreeper\nhoneyeater\nhookersealion\nhoopoe\nhornbill\nhornedtoad\nhornedviper\nhornet\nhornshark\nhorse\nhorsechestnutleafminer\nhorsefly\nhorsemouse\nhorseshoebat\nhorseshoecrab\nhound\nhousefly\nhoverfly\nhowlermonkey\nhuemul\nhuia\nhuman\nhummingbird\nhumpbackwhale\nhusky\nhydatidtapeworm\nhydra\nhyena\nhylaeosaurus\nhypacrosaurus\nhypsilophodon\nhyracotherium\nhyrax\niaerismetalmark\nibadanmalimbe\niberianbarbel\niberianchiffchaff\niberianemeraldlizard\niberianlynx\niberianmidwifetoad\niberianmole\niberiannase\nibex\nibis\nibisbill\nibizanhound\niceblueredtopzebra\nicefish\nicelandgull\nicelandichorse\nicelandicsheepdog\nichidna\nichneumonfly\nichthyosaurs\nichthyostega\nicterinewarbler\niggypops\niguana\niguanodon\nilladopsis\nilsamochadegu\nimago\nimpala\nimperatorangel\nimperialeagle\nincatern\ninchworm\nindianabat\nindiancow\nindianelephant\nindianglassfish\nindianhare\nindianjackal\nindianpalmsquirrel\nindianpangolin\nindianrhinoceros\nindianringneckparakeet\nindianrockpython\nindianskimmer\nindianspinyloach\nindigobunting\nindigowingedparrot\nindochinahogdeer\nindochinesetiger\nindri\nindusriverdolphin\ninexpectatumpleco\ninganue\ninsect\nintermediateegret\ninvisiblerail\niraniangroundjay\niridescentshark\niriomotecat\nirishdraughthorse\nirishredandwhitesetter\nirishsetter\nirishterrier\nirishwaterspaniel\nirishwolfhound\nirrawaddydolphin\nirukandjijellyfish\nisabellineshrike\nisabellinewheatear\nislandcanary\nislandwhistler\nisopod\nitalianbrownbear\nitaliangreyhound\nivorybackedwoodswallow\nivorybilledwoodpecker\nivorygull\nizuthrush\njabiru\njackal\njackrabbit\njaeger\njaguar\njaguarundi\njanenschia\njapanesebeetle\njavalina\njay\njellyfish\njenny\njerboa\njoey\njohndory\njuliabutterfly\njumpingbean\njunco\njunebug\nkagu\nkakapo\nkakarikis\nkangaroo\nkarakul\nkatydid\nkawala\nkentrosaurus\nkestrel\nkid\nkilldeer\nkillerwhale\nkillifish\nkingbird\nkingfisher\nkinglet\nkingsnake\nkinkajou\nkiskadee\nkissingbug\nkite\nkitfox\nkitten\nkittiwake\nkitty\nkiwi\nkoala\nkoalabear\nkob\nkodiakbear\nkoi\nkomododragon\nkoodoo\nkookaburra\nkouprey\nkrill\nkronosaurus\nkudu\nkusimanse\nlabradorretriever\nlacewing\nladybird\nladybug\nlamb\nlamprey\nlangur\nlark\nlarva\nlaughingthrush\nlcont\nleafbird\nleafcutterant\nleafhopper\nleafwing\nleech\nlemming\nlemur\nleonberger\nleopard\nleopardseal\nleveret\nlhasaapso\nlice\nliger\nlightningbug\nlimpet\nlimpkin\nling\nlion\nlionfish\nlittlenightmonkeys\nlizard\nllama\nlobo\nlobster\nlocust\nloggerheadturtle\nlonghorn\nlonghornbeetle\nlongspur\nloon\nlorikeet\nloris\nlouse\nlovebird\nlowchen\nlunamoth\nlungfish\nlynx\nlynx \nmacaque\nmacaw\nmacropod\nmadagascarhissingroach\nmaggot\nmagpie\nmaiasaura\nmajungatholus\nmalamute\nmallard\nmaltesedog\nmamba\nmamenchisaurus\nmammal\nmammoth\nmanatee\nmandrill\nmangabey\nmanta\nmantaray\nmantid\nmantis\nmantisray\nmanxcat\nmara\nmarabou\nmarbledmurrelet\nmare\nmarlin\nmarmoset\nmarmot\nmarten\nmartin\nmassasauga\nmassospondylus\nmastiff\nmastodon\nmayfly\nmeadowhawk\nmeadowlark\nmealworm\nmeerkat\nmegalosaurus\nmegalotomusquinquespinosus\nmegaraptor\nmerganser\nmerlin\nmetalmarkbutterfly\nmetamorphosis\nmice\nmicrovenator\nmidge\nmilksnake\nmilkweedbug\nmillipede\nminibeast\nmink\nminnow\nmite\nmoa\nmockingbird\nmole\nmollies\nmollusk\nmolly\nmonarch\nmongoose\nmongrel\nmonkey\nmonkfish \nmonoclonius\nmontanoceratops\nmoorhen\nmoose\nmoray\nmorayeel\nmorpho\nmosasaur\nmosquito\nmoth\nmotmot\nmouflon\nmountaincat\nmountainlion\nmouse\nmouse/mice\nmousebird\nmudpuppy\nmule\nmullet\nmuntjac\nmurrelet\nmuskox\nmuskrat\nmussaurus\nmussel\nmustang\nmutt\nmyna\nmynah\nmyotis \nnabarlek\nnag\nnaga\nnagapies\nnakedmolerat\nnandine\nnandoo\nnandu\nnarwhal\nnarwhale\nnatterjacktoad\nnauplius\nnautilus\nneedlefish\nneedletail\nnematode\nnene\nneonblueguppy\nneonbluehermitcrab\nneondwarfgourami\nneonrainbowfish\nneonredguppy\nneontetra\nnerka\nnettlefish\nnewfoundlanddog\nnewt\nnewtnutria\nnightcrawler\nnighthawk\nnightheron\nnightingale\nnightjar\nnijssenissdwarfchihlid\nnilgai\nninebandedarmadillo\nnoctilio\nnoctule\nnoddy\nnoolbenger\nnortherncardinals\nnorthernelephantseal\nnorthernflyingsquirrel\nnorthernfurseal\nnorthernhairynosedwombat\nnorthernpike\nnorthernseahorse\nnorthernspottedowl\nnorwaylobster\nnorwayrat\nnubiangoat\nnudibranch\nnumbat\nnurseshark\nnutcracker\nnuthatch\nnutria\nnyala\nnymph\nocelot\noctopus\nokapi\nolingo\nolm\nopossum\norangutan\norca\noregonsilverspotbutterfly\noriole\noropendola\noropendula\noryx\nosprey\nostracod\nostrich\notter\novenbird\nowl\nowlbutterfly\nox\noxen\noxpecker\noyster\nozarkbigearedbat\npaca \npachyderm\npacificparrotlet\npaddlefish\npaintedladybutterfly\npanda\npangolin\npanther\npaperwasp\npapillon\nparakeet\nparrot\npartridge\npeacock\npeafowl\npeccary\npekingese\npelican\npelicinuspetrel\npenguin\nperch\nperegrinefalcon\npewee\nphalarope\npharaohhound\npheasant\nphoebe\nphoenix\npig\npigeon\npiglet\npika\npike\npikeperch \npilchard\npinemarten\npinkriverdolphin\npinniped\npintail\npipistrelle\npipit\npiranha\npitbull\npittabird\nplainsqueaker\nplankton\nplanthopper\nplatypus\nplover\npolarbear\npolecat\npolliwog\npolyp\npolyturator\npomeranian\npondskater\npony\npooch\npoodle\nporcupine\nporpoise\nportuguesemanofwar\npossum\nprairiedog\nprawn\nprayingmantid\nprayingmantis\nprimate\npronghorn\npseudodynerusquadrisectus\nptarmigan\npterodactyls\npterosaurs\npuffer\npufferfish\npuffin\npug\npullet\npuma\npupa\npupfish\npuppy\npurplemarten\npussycat\npygmy\npython\nquadrisectus\nquagga\nquahog\nquail\nqueenalexandrasbirdwing\nqueenalexandrasbirdwingbutterfly\nqueenant\nqueenbee\nqueenconch\nqueenslandgrouper\nqueenslandheeler\nqueensnake\nquelea\nquetzal\nquetzalcoatlus\nquillback\nquinquespinosus\nquokka\nquoll\nrabbit\nrabidsquirrel\nraccoon\nracer\nracerunner\nragfish\nrail\nrainbowfish\nrainbowlorikeet\nrainbowtrout\nram\nraptors\nrasbora\nrat\nratfish\nrattail\nrattlesnake\nraven\nray\nredhead\nredheadedwoodpecker\nredpoll\nredstart\nredtailedhawk\nreindeer\nreptile\nreynard\nrhea\nrhesusmonkey\nrhino\nrhinoceros\nrhinocerosbeetle\nrhodesianridgeback\nringtailedlemur\nringworm\nriograndeescuerzo\nroach\nroadrunner\nroan\nrobberfly\nrobin\nrockrat\nrodent\nroebuck\nroller\nrook\nrooster\nrottweiler\nsable\nsableantelope\nsablefish \nsaiga\nsakimonkey\nsalamander\nsalmon\nsaltwatercrocodile\nsambar\nsamoyeddog\nsandbarshark\nsanddollar\nsanderling\nsandpiper\nsapsucker\nsardine\nsawfish\nscallop\nscarab\nscarletibis\nscaup\nschapendoes\nschipperke\nschnauzer\nscorpion\nscoter\nscreamer\nseabird\nseagull\nseahog\nseahorse\nseal\nsealion\nseamonkey\nseaslug\nseaurchin\nsenegalpython\nseriema\nserpent\nserval\nshark\nshearwater\nsheep\nsheldrake\nshelduck\nshibainu\nshihtzu\nshorebird\nshoveler\nshrew\nshrike\nshrimp\nsiamang\nsiamesecat\nsiberiantiger\nsidewinder\nsifaka\nsilkworm\nsilverfish\nsilverfox\nsilversidefish\nsiskin\nskimmer\nskink\nskipper\nskua\nskunk\nskylark\nsloth\nslothbear\nslug\nsmelts\nsmew\nsnail\nsnake\nsnipe\nsnoutbutterfly\nsnowdog\nsnowgeese\nsnowleopard\nsnowmonkey\nsnowyowl\nsockeyesalmon\nsolenodon\nsolitaire\nsongbird\nsora\nsouthernhairnosedwombat\nsow\nspadefoot\nsparrow\nsphinx\nspider\nspidermonkey\nspiketail\nspittlebug\nsponge\nspoonbill\nspotteddolphin\nspreadwing\nspringbok\nspringpeeper\nspringtail\nsquab\nsquamata\nsqueaker\nsquid\nsquirrel\nstag\nstagbeetle\nstallion\nstarfish\nstarling\nsteed\nsteer\nstegosaurus\nstickinsect\nstickleback\nstilt\nstingray\nstinkbug\nstinkpot\nstoat\nstonefly\nstork\nstud\nsturgeon\nsugarglider\nsulphurbutterfly\nsunbear\nsunbittern\nsunfish\nswallow\nswallowtail\nswallowtailbutterfly\nswan\nswellfish\nswift\nswordfish\ntadpole\ntahr\ntakin\ntamarin\ntanager\ntapaculo\ntapeworm\ntapir\ntarantula\ntarpan\ntarsier\ntaruca\ntasmaniandevil\ntasmaniantiger\ntattler\ntayra\nteal\ntegus\nteledu\ntench\ntenrec\ntermite\ntern\nterrapin\nterrier\nthoroughbred\nthrasher\nthrip\nthrush\nthunderbird\nthylacine\ntick\ntiger\ntigerbeetle\ntigermoth\ntigershark\ntilefish\ntinamou\ntiti\ntitmouse\ntoad\ntoadfish\ntomtit \ntopi\ntortoise\ntoucan\ntowhee\ntragopan\ntreecreeper\ntrex\ntriceratops\ntrogon\ntrout\ntrumpeterbird\ntrumpeterswan\ntsetsefly\ntuatara\ntuna\nturaco\nturkey\nturnstone\nturtle\nturtledove\nuakari\nugandakob\nuintagroundsquirrel\nulyssesbutterfly\numbrellabird\numbrette\nunau\nungulate\nunicorn\nupupa\nurchin\nurial\nuromastyxmaliensis\nuromastyxspinipes\nurson\nurubu\nurus\nurutu\nurva\nutahprairiedog\nvampirebat\nvaquita\nveery\nvelociraptor\nvelvetcrab\nvelvetworm\nvenomoussnake\nverdin\nvervet\nviceroybutterfly\nvicuna\nviper\nviperfish\nvipersquid\nvireo\nvirginiaopossum\nvixen\nvole\nvolvox\nvulpesvelox\nvulpesvulpes\nvulture\nwalkingstick\nwallaby\nwallaroo\nwalleye\nwalrus\nwarbler\nwarthog\nwasp\nwaterboatman\nwaterbuck\nwaterbuffalo\nwaterbug\nwaterdogs\nwaterdragons\nwatermoccasin\nwaterstrider\nwaterthrush\nwattlebird\nwatussi\nwaxwing\nweasel\nweaverbird\nweevil\nwestafricanantelope\nwhale\nwhapuku\nwhelp\nwhimbrel\nwhippet\nwhippoorwill\nwhitebeakeddolphin\nwhiteeye\nwhitepelican\nwhiterhino\nwhitetaileddeer\nwhitetippedreefshark\nwhooper\nwhoopingcrane\nwidgeon\nwidowspider\nwildcat\nwildebeast\nwildebeest\nwillet\nwireworm\nwisent\nwobbegongshark\nwolf\nwolfspider\nwolverine\nwombat\nwoodborer\nwoodchuck\nwoodcock\nwoodnymphbutterfly\nwoodpecker\nwoodstorks\nwoollybearcaterpillar\nworm\nwrasse\nwreckfish\nwren\nwrenchbird\nwryneck\nwuerhosaurus\nwyvern\nxanclomys\nxanthareel\nxantus\nxantusmurrelet\nxeme\nxenarthra\nxenoposeidon\nxenops\nxenopterygii\nxenopus\nxenotarsosaurus\nxenurine\nxenurusunicinctus\nxerus\nxiaosaurus\nxinjiangovenator\nxiphias\nxiphiasgladius\nxiphosuran\nxoloitzcuintli\nxoni\nxrayfish\nxraytetra\nxuanhanosaurus\nxuanhuaceratops\nxuanhuasaurus\nyaffle\nyak\nyapok\nyardant\nyearling\nyellowbelliedmarmot\nyellowbellylizard\nyellowhammer\nyellowjacket\nyellowlegs\nyellowthroat\nyellowwhitebutterfly\nyeti\nynambu\nyorkshireterrier\nyosemitetoad\nyucker\nzander\nzanzibardaygecko\nzebra\nzebradove\nzebrafinch\nzebrafish\nzebralongwingbutterfly\nzebraswallowtailbutterfly\nzebratailedlizard\nzebu\nzenaida\nzeren\nzethusspinipes\nzethuswasp\nzigzagsalamander\nzonetailedpigeon\nzooplankton\nzopilote\nzorilla"
			}
		}
	},
	"Resources": {
		"WordListQueue": {
			"Type": "AWS::SQS::Queue",
			"Properties": {
                "VisibilityTimeout": 60
			}
		},
		"ConfigurationSetupFunction": {
			"Type": "AWS::Lambda::Function",
			"Properties": {
                "Description": "Performs initial setup of unique name generator.",
				"Handler": "index.lambda_handler",
                "MemorySize": 1024,
				"Role": {
					"Fn::GetAtt": ["ConfigurationSetupRole", "Arn"]
				},
				"Code": {
					"ZipFile": {
						"Fn::Join": ["\n", [
                            "\"\"\"", 
                            "    This function is run during the CloudFormation stack creation to ", 
                            "    load the word lists into DynamoDB.", 
                            "\"\"\"", 
                            "from __future__ import print_function", 
                            "import urllib2, json, traceback, time", 
                            "from random import shuffle", 
                            "import boto3", 
                            "import cfnresponse", 
                            "", 
                            "sqs_send_batch_size_max = 10", 
                            "queue_purge_delay_seconds = 60", 
                            "max_sqs_tries = 5", 
                            "", 
                            "def save_word_list(word_list_queue_url, word_list_string, shuffle_word_list):", 
                            "    ", 
                            "    word_list = word_list_string.strip().split(\"\\n\")", 
                            "    print(\"Found {:d} words in word list from CloudFormation template.\".format(len(word_list)))", 
                            "    ", 
                            "    if shuffle_word_list:", 
                            "        print(\"Shuffling word list.\")", 
                            "        shuffle(word_list)", 
                            "    else:", 
                            "        print(\"Sorting word list.\")", 
                            "        word_list.sort()", 
                            "    ", 
                            "    print(\"Word List SQS Queue URL: {}\".format(word_list_queue_url))", 
                            "    ", 
                            "    # Get reference to our SQS queue.", 
                            "    queue = boto3.resource(\"sqs\").Queue(word_list_queue_url)", 
                            "    ", 
                            "    # Purge the queue if it already has messages.", 
                            "    if int(queue.attributes[\"ApproximateNumberOfMessages\"]) > 0:", 
                            "        print(\"Queue already contains messages. Purging them.\")", 
                            "        queue.purge()", 
                            "        time.sleep(queue_purge_delay_seconds)", 
                            "    ", 
                            "    remaining_words_to_add = word_list", 
                            "    ", 
                            "    sqs_attempt_count = 0", 
                            "    while sqs_attempt_count < max_sqs_tries:", 
                            "        ", 
                            "        # Try to add the words. Keep list of words that failed to add (for whatever reason).", 
                            "        remaining_words_to_add = add_words_to_queue(queue, remaining_words_to_add)", 
                            "        ", 
                            "        sqs_attempt_count += 1", 
                            "    ", 
                            "    if len(remaining_words_to_add) > 0:", 
                            "        raise Exception(\"After {:d} attempt(s), {:d} words still not added to queue.\".format(max_sqs_tries, len(remaining_words_to_add)))", 
                            "    ", 
                            "    ", 
                            "", 
                            "def add_words_to_queue(queue, word_list):", 
                            "    ", 
                            "    # Split the word list into batches to maximize efficiency.", 
                            "    word_list_batches = []", 
                            "    ", 
                            "    new_word_list_batch = []", 
                            "    for i, each_word in enumerate(word_list):", 
                            "        new_word_list_batch.append(each_word)", 
                            "        ", 
                            "        if i % sqs_send_batch_size_max == sqs_send_batch_size_max - 1:", 
                            "            ", 
                            "            # This batch is full. Add it to the list and reset the current batch.", 
                            "            word_list_batches.append(new_word_list_batch)", 
                            "            new_word_list_batch = []", 
                            "    ", 
                            "    # Add last batch (if not empty).", 
                            "    if len(new_word_list_batch):", 
                            "        word_list_batches.append(new_word_list_batch)", 
                            "    ", 
                            "    failed_words = []", 
                            "    ", 
                            "    # Add the words in each batch to the word list queue.", 
                            "    for i, each_word_batch in enumerate(word_list_batches):", 
                            "        ", 
                            "        new_entries_list = []", 
                            "        ", 
                            "        for j, each_word in enumerate(each_word_batch):", 
                            "            new_entries_list.append({", 
                            "                \"Id\": \"{:d}\".format(j),", 
                            "                \"MessageBody\": json.dumps({", 
                            "                    \"word\": each_word,", 
                            "                    \"count\": 1", 
                            "                })", 
                            "            })", 
                            "        ", 
                            "        print(\"Adding word batch {:d}/{:d} to word list queue.\".format(i+1, len(word_list_batches)))", 
                            "        ", 
                            "        response = queue.send_messages(", 
                            "            Entries = new_entries_list", 
                            "        )", 
                            "        ", 
                            "        request_fail_count = 0", 
                            "        ", 
                            "        for each_record in response.get(\"Failed\", []):", 
                            "            request_fail_count += 1", 
                            "            failed_word_index = int(each_record[\"Id\"])", 
                            "            failed_words.append(each_word_batch[failed_word_index])", 
                            "    ", 
                            "    # Return words that were unable to be added.", 
                            "    return failed_words", 
                            "    ", 
                            "", 
                            "def lambda_handler(event, context):", 
                            "    print(\"Event: {}\".format(json.dumps(event)))", 
                            "    ", 
                            "    cfn_response_type = cfnresponse.SUCCESS", 
                            "    ", 
                            "    if event[\"RequestType\"] == \"Create\":", 
                            "    ", 
                            "        try:", 
                            "            save_word_list(", 
                            "                event[\"ResourceProperties\"][\"WordListQueueUrl\"],", 
                            "                event[\"ResourceProperties\"][\"WordList\"],", 
                            "                event[\"ResourceProperties\"][\"ShuffleWordList\"] != \"No\"", 
                            "            )", 
                            "    ", 
                            "        except Exception as e:", 
                            "            print(traceback.format_exc())", 
                            "            cfn_response_type = cfnresponse.FAILED", 
                            "    ", 
                            "    cfnresponse.send(", 
                            "        event,", 
                            "        context,", 
                            "        cfn_response_type,", 
                            "        {}", 
                            "    )",
                            ""
                        ]]
					}
				},
				"Runtime": "python2.7",
				"Timeout": "300"
			}
		},
		"ConfigurationSetupRole": {
			"Type": "AWS::IAM::Role",
			"Properties": {
				"AssumeRolePolicyDocument": {
					"Version": "2012-10-17",
					"Statement": [{
						"Effect": "Allow",
						"Principal": {
							"Service": ["lambda.amazonaws.com"]
						},
						"Action": ["sts:AssumeRole"]
					}]
				},
				"Path": "/"
			}
		},
        "ConfigurationSetupRoleActions": {
            "Type": "AWS::IAM::ManagedPolicy",
            "Properties": {
                "PolicyDocument": {
					"Version": "2012-10-17",
					"Statement": [{
						"Effect": "Allow",
						"Action": ["logs:CreateLogGroup", "logs:CreateLogStream", "logs:PutLogEvents"],
						"Resource": {
    						"Fn::Join": [":", [
                                "arn",
                                "aws",
                                "logs",
                                {
                                    "Ref": "AWS::Region"
                                },
                                {
                                    "Ref": "AWS::AccountId"
                                },
                                "log-group",
                                {
                                    "Fn::Join": ["", [
                                        "/aws/lambda/",
                                        {
                                            "Ref": "ConfigurationSetupFunction"
                                        }
                                    ]]
                                },
                                "log-stream",
                                "*"
                            ]]
						}
					},
                    {
                        "Effect": "Allow",
                        "Action": ["sqs:SendMessage", "sqs:SendMessageBatch", "sqs:GetQueueAttributes", "sqs:PurgeQueue"],
                        "Resource": {
    						"Fn::GetAtt": ["WordListQueue", "Arn"]
                        }
                    }]
				},
                "Roles": [
                    { "Ref": "ConfigurationSetupRole" }
                ]
            }
        },
		"ConfigurationSetupInvocation": {
			"Type": "Custom::ConfigurationSetupInvocation",
			"Properties": {
				"ServiceToken": {
					"Fn::GetAtt": ["ConfigurationSetupFunction", "Arn"]
				},
                "ShuffleWordList": {
                    "Ref": "ShuffleWordList"
                },
				"WordListQueueUrl": {
                    "Ref": "WordListQueue"
				},
                "WordList": {
                    "Fn::FindInMap": ["StaticVariables", "Main", "WordList"]
                }
			},
            "DependsOn": [
                "ConfigurationSetupRoleActions"
            ]
		},
		"NameGeneratorFunction": {
			"Type": "AWS::Lambda::Function",
			"Properties": {
                "Description": "Responds to API requests for the unique name generator.",
				"Handler": "index.lambda_handler",
                "MemorySize": 320,
				"Role": {
					"Fn::GetAtt": ["NameGeneratorRole", "Arn"]
				},
				"Code": {
					"ZipFile": {
						"Fn::Join": ["\n", [
                            "\"\"\"", 
                            "    This function is called by API Gateway to generate a new unique word.", 
                            "\"\"\"", 
                            "from __future__ import print_function", 
                            "import json", 
                            "import boto3", 
                            "", 
                            "def lambda_handler(event, context):", 
                            "    print(\"Event: {}\".format(json.dumps(event)))", 
                            "    ", 
                            "    # Get reference to our SQS queue.", 
                            "    queue = boto3.resource(\"sqs\").Queue(event[\"wordlist-queue-url\"])", 
                            "    ", 
                            "    print(\"Pulling the next word from the word list queue.\")", 
                            "    ", 
                            "    sqs_message_list = queue.receive_messages()", 
                            "    ", 
                            "    if len(sqs_message_list) == 0:", 
                            "        raise Exception(\"No words available in queue.\")", 
                            "    ", 
                            "    sqs_message = sqs_message_list[0]", 
                            "    ", 
                            "    message_body_object = json.loads(sqs_message.body)", 
                            "    ", 
                            "    new_word = message_body_object[\"word\"]", 
                            "    times_returned = message_body_object[\"count\"]", 
                            "    ", 
                            "    print(\"Retrieved \\\"{}\\\". Previously returned {:d} time(s).\".format(new_word, times_returned))", 
                            "    ", 
                            "    print(\"Deleting message from the queue.\")", 
                            "    sqs_message.delete()", 
                            "    ", 
                            "    print(\"Adding new message to queue with incremented count value.\")", 
                            "    queue.send_message(", 
                            "        MessageBody = json.dumps({", 
                            "            \"word\": new_word,", 
                            "            \"count\": times_returned + 1", 
                            "        })", 
                            "    )", 
                            "    ", 
                            "    final_word = None", 
                            "    ", 
                            "    if times_returned == 1:", 
                            "        # Return the word as-is, with no numeric increment.", 
                            "        final_word = new_word", 
                            "    else:", 
                            "        # Append a number representing the number of times the word has been returned.", 
                            "        final_word = \"{}{:d}\".format(new_word, times_returned)", 
                            "    ", 
                            "    print(\"Returning word: \\\"{}\\\"\".format(final_word))", 
                            "    ", 
                            "    return final_word",
                            ""
                        ]]
					}
				},
				"Runtime": "python2.7",
				"Timeout": "60"
			}
		},
		"NameGeneratorRole": {
			"Type": "AWS::IAM::Role",
			"Properties": {
				"AssumeRolePolicyDocument": {
					"Version": "2012-10-17",
					"Statement": [{
						"Effect": "Allow",
						"Principal": {
							"Service": ["lambda.amazonaws.com"]
						},
						"Action": ["sts:AssumeRole"]
					}]
				},
				"Path": "/"
			}
		},
        "NameGeneratorRoleActions": {
            "Type": "AWS::IAM::ManagedPolicy",
            "Properties": {
                "PolicyDocument": {
					"Version": "2012-10-17",
					"Statement": [{
						"Effect": "Allow",
						"Action": ["logs:CreateLogGroup", "logs:CreateLogStream", "logs:PutLogEvents"],
						"Resource": {
    						"Fn::Join": [":", [
                                "arn",
                                "aws",
                                "logs",
                                {
                                    "Ref": "AWS::Region"
                                },
                                {
                                    "Ref": "AWS::AccountId"
                                },
                                "log-group",
                                {
                                    "Fn::Join": ["", [
                                        "/aws/lambda/",
                                        {
                                            "Ref": "NameGeneratorFunction"
                                        }
                                    ]]
                                },
                                "log-stream",
                                "*"
                            ]]
						}
					},
                    {
                        "Effect": "Allow",
                        "Action": [
                            "sqs:DeleteMessage",
                            "sqs:ReceiveMessage",
                            "sqs:SendMessage"
                        ],
                        "Resource": {
    						"Fn::GetAtt": ["WordListQueue", "Arn"]
                        }
                    }]
				},
                "Roles": [
                    { "Ref": "NameGeneratorRole" }
                ]
            }
        },
        "NameGeneratorApi": {
            "Type": "AWS::ApiGateway::RestApi",
            "Properties": {
                "Name": "NameGenerator",
                "Description": "An API for generating unique names."
            }
        },
        "NameGeneratorApiGenerateNameResource": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
                "ParentId": {
                    "Fn::GetAtt": ["NameGeneratorApi", "RootResourceId"]
                },
                "PathPart": {
                    "Fn::FindInMap": ["StaticVariables", "Main", "GenerateNameMethodPathPart"]
                },
                "RestApiId": {
                    "Ref": "NameGeneratorApi"
                }
            }
        },
        "NameGeneratorApiLambdaPermission": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
                "Action": "lambda:InvokeFunction",
                "FunctionName": {
                    "Ref": "NameGeneratorFunction"
                },
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                    "Fn::Join": [":", [
                        "arn",
                        "aws",
                        "execute-api",
                        {
                            "Ref": "AWS::Region"
                        },
                        {
                            "Ref": "AWS::AccountId"
                        },
                        {
                            "Fn::Join": ["/", [
                                {
                                    "Ref": "NameGeneratorApi"
                                },
                                "*",
                                {
                                    "Fn::FindInMap": ["StaticVariables", "Main", "GenerateNameHttpMethod"]
                                },
                                "generate-name"
                            ]]
                        }
                    ]]
                }
            },
            "DependsOn": [
                "NameGeneratorRoleActions"
            ]
        },
        "NameGeneratorApiGenerateNameResourceMainMethod": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
                "AuthorizationType": "NONE",
                "ResourceId": {
                    "Ref": "NameGeneratorApiGenerateNameResource"
                },
                "RestApiId": {
                    "Ref": "NameGeneratorApi"
                },
                "HttpMethod": 
                {
                    "Fn::FindInMap": ["StaticVariables", "Main", "GenerateNameHttpMethod"]
                },
                "Integration": {
                    "IntegrationHttpMethod": "POST",
                    "IntegrationResponses": [
                        {
                            "ResponseParameters": {
                                "method.response.header.Access-Control-Allow-Origin": "'*'",
                                "method.response.header.Access-Control-Allow-Methods": {
                                    "Fn::Join": ["", [
                                        "'",
                                        {
                                            "Fn::FindInMap": ["StaticVariables", "Main", "GenerateNameHttpMethod"]
                                        },
                                        ",",
                                        "OPTIONS",
                                        "'"
                                    ]]
                                },
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,Pragma,Cache-Control,If-Modified-Since'",
                                "method.response.header.Content-Type": "'text/plain'"
                            },
                            "ResponseTemplates": {
                                "text/plain": "$input.path('$')"
                            },
                            "StatusCode": "200"
                        }
                    ],
                    "PassthroughBehavior": "NEVER",
                    "RequestTemplates": {
                        "application/json": {
                            "Fn::Join": ["", [
                                "{\n",
                                "\t",
                                "\"request-body\": $input.json(\"$\"),\n",
                                "\t",
                                "\"wordlist-queue-url\": \"",
                                {
                                    "Ref": "WordListQueue"
                                },
                                "\"\n",
                                "}"
                            ]]
                        }
                    },
                    "Type": "AWS",
                    "Uri": {
                        "Fn::Join": [":", [
                            "arn",
                            "aws",
                            "apigateway",
                            {
                                "Ref": "AWS::Region"
                            },
                            "lambda",
                            {
                                "Fn::Join": ["/", [
                                    "path",
                                    "2015-03-31",
                                    "functions",
                                    {
                                        "Fn::GetAtt": ["NameGeneratorFunction", "Arn"]
                                    },
                                    "invocations"
                                ]]
                            }
                        ]]
                    }
                },
                "MethodResponses": [
                    {
                        "ResponseParameters": {
                            "method.response.header.Access-Control-Allow-Origin": false,
                            "method.response.header.Access-Control-Allow-Methods": false,
                            "method.response.header.Access-Control-Allow-Headers": false,
                            "method.response.header.Content-Type": false
                        },
                        "StatusCode": "200"
                    }
                ]
            }
        },
        "NameGeneratorApiGenerateNameResourceOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
                "AuthorizationType": "NONE",
                "ResourceId": {
                    "Ref": "NameGeneratorApiGenerateNameResource"
                },
                "RestApiId": {
                    "Ref": "NameGeneratorApi"
                },
                "HttpMethod": "OPTIONS",
                "Integration": {
                    "IntegrationResponses": [
                        {
                            "ResponseParameters": {
                                "method.response.header.Access-Control-Allow-Origin": "'*'",
                                "method.response.header.Access-Control-Allow-Methods": {
                                    "Fn::Join": ["", [
                                        "'",
                                        {
                                            "Fn::FindInMap": ["StaticVariables", "Main", "GenerateNameHttpMethod"]
                                        },
                                        ",",
                                        "OPTIONS",
                                        "'"
                                    ]]
                                },
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,Pragma,Cache-Control,If-Modified-Since'"
                            },
                            "StatusCode": "200"
                        }
                    ],
                    "PassthroughBehavior": "NEVER",
                    "RequestTemplates": {
                        "application/json": "{\"statusCode\": \"200\"}"
                    },
                    "Type": "MOCK"
                },
                "MethodResponses": [
                    {
                        "ResponseParameters": {
                            "method.response.header.Access-Control-Allow-Origin": false,
                            "method.response.header.Access-Control-Allow-Methods": false,
                            "method.response.header.Access-Control-Allow-Headers": false
                        },
                        "StatusCode": "200"
                    }
                ]
            }
        },
        "NameGeneratorApiDeployment": {
            "Type": "AWS::ApiGateway::Deployment",
            "Properties": {
                "RestApiId": {
                    "Ref": "NameGeneratorApi"
                },
                "StageName": "DummyStage"
            },
            "DependsOn": [
                "NameGeneratorApiGenerateNameResourceMainMethod",
                "NameGeneratorApiGenerateNameResourceOptions"
            ]
        },
        "NameGeneratorApiStage": {
            "Type": "AWS::ApiGateway::Stage",
            "Properties": {
                "DeploymentId": {
                    "Ref": "NameGeneratorApiDeployment"
                },
                "RestApiId": {
                    "Ref": "NameGeneratorApi"
                },
                "StageName": {
                    "Fn::FindInMap": ["StaticVariables", "Main", "StageName"]
                }
            }
        }
	},
    "Outputs": {
        "NameGeneratorApiEndPoint": {
            "Value": {
                "Fn::Join": [
                    "", [
                        "https://",
                        {
                            "Ref": "NameGeneratorApi"
                        },
                        ".execute-api.",
                        {
                            "Ref": "AWS::Region"
                        },
                        ".amazonaws.com/",
                        {
                            "Fn::FindInMap": ["StaticVariables", "Main", "StageName"]
                        },
                        "/",
                        {
                            "Fn::FindInMap": ["StaticVariables", "Main", "GenerateNameMethodPathPart"]
                        }
                    ]
                ]
            }
        }
    }
}